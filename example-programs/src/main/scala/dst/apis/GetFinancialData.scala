package ltbs.uniform.examples.dst.apis
package getfinancialdata

import scala.language.higherKinds
import java.time.{LocalDate => Day, LocalDateTime}
import enumeratum._
import cats.data.NonEmptySet

sealed trait ErrorResponseCode extends EnumEntry

case class Money(pennies: Int)

object ErrorResponseCode extends Enum[ErrorResponseCode] {
  def values = findValues

  case object InvalidRegime extends ErrorResponseCode
  case object InvalidIdtype extends ErrorResponseCode
  case object InvalidIdnumber extends ErrorResponseCode
  case object InvalidPayload extends ErrorResponseCode

  /** The back end has indicated that business partner key information cannot be found for the id number. */
  case object NotFoundBpkey extends ErrorResponseCode

  /** The back end has indicated that the taxpayer profile cannot be found for the ID. */
  case object NotFoundId extends ErrorResponseCode
  case object DuplicateSubmission extends ErrorResponseCode
  case object ServerError extends ErrorResponseCode
  case object ServiceUnavailable extends ErrorResponseCode
}

case class ErrorResponse(
  code: ErrorResponseCode,
  reason: String
)

case class FinancialData(
  chargeType: String,
  mainType: String,
  periodKey: String,
  periodKeyDescription: String, // WTF?!
  taxPeriodFrom: Day,
  taxPeriodTo: Day,
  businessPartner: String,
  contractAccountCategory: String, // 2 chars
  contractAccount: String,
  contractObjectType: String,
  contractObject: String,
  sapDocumentNumber: String,
  sapDocumentNumberItem: String,   
  chargeReference: String,
  mainTransaction: String,
  subTransaction: String,
  originalAmount: Money,
  outstandingAmount: Money,
  clearedAmount: Money,
  accruedInterest: Money,
  items: List[LineItem]
)

case class LineItem (
  subItem: String,
  dueDate: Day,
  amount: Money,
  clearingDate: Day,
  clearingReason: String,
  outgoingPaymentMethod: String, /// ???
  paymentLock: String,
  clearingLock: String,
  interestLock: String,
  dunningLock: String,
  /** "If true, means that the charge has been generated by a 'return'" */
  returnFlag: Boolean,
  paymentReference: String,
  paymentAmount: Money,
  paymentMethod: String,
  paymentLot: String,
  paymentLotItem: String,
  clearingSAPDocument: String,
  statisticalDocument: String, // 1 char - some sort of code
  returnReason: String,
  promiseToPay: String
)

trait Identification

trait GetFinancialData[F[_]]{
  def onlyOpenItems(
    identification: Identification,
    regimeType: String, // ^(PAYE|ITSA|SIMP|VATC|LISA|ZSDL|NI|DST|PARC)$
    from: Option[Day],
    to: Option[Day],
    includeLocks: Boolean,
    calculateAccruedInterest: Boolean
  ): F[Either[NonEmptySet[ErrorResponse], FinancialData]]

  def allItems(
    identification: Identification,
    regimeType: String, // ^(PAYE|ITSA|SIMP|VATC|LISA|ZSDL|NI|DST|PARC)$
    from: Day,
    to: Day,
    includeLocks: Boolean,
    calculateAccruedInterest: Boolean
  ): F[Either[NonEmptySet[ErrorResponse], FinancialData]]
  
}
